from pyballistics import ozvb_termo, get_options_agard, get_options_sample, ozvb_lagrange
import numpy as np
import timeit
import copy
import matplotlib.pyplot as plt

def OZVB(init_data = get_options_sample(), model_setting = 'НМ',limit_borders = None,out_arg = 'Wкн'):
    """Функция выполняющая расчет основной задачи внутренней
    баллистики артиллерийского орудия.
    
    init_data - входные параметры расчета системы: характеристики
    орудия и снаряда (калибр, масса боеприпаса, обьем камеры 
    заряжания, тип орудия(гладкоствольное, нарезное), давление
    форсирования, температура в стволе в начале расчета и т.д.), 
    характеристики заряда пороха и воспламенителя(масса и 
    наименование марки и т. д.), допущения системы (учет 
    теплоотдачи в стенки ствола, учет давления столба воздуха 
    и т.д.), параметры остановки расчета (конец ствола, 
    превышение макс скорости, давления и т.д.), параметры для 
    расчета математической модели (нульмерной и квазиодномерной)).
    Тип данных - dict (пример в библиотеке pyballistics)
    
    Пример:{'powders': [{'omega': , 'dbname': 'НДТ-3 23/1'}],
    'init_conditions': {'q': 100,
    'd': 0.2032,
    'W_0': 0.03,
    'phi_1': 1.05,
    'p_0': 30000000.0,
    'T_0' : 293.15,
    'n_S' : 1.04},
    'igniter': {'p_ign_0': 1000000.0},      
           
    'meta_termo': {'dt': 5e-06, 'method': 'rk2'},
    'meta_lagrange': {'CFL': 0.9, 'n_cells': 150},
    'stop_conditions': {'v_p': 650, 'p_max': 350000000.0,'x_p': 6.096},
    'windage': {'shock_wave' : False},
    'heat': {'enabled' : False}}
    
    model_setting - задание типа математической модели расчета:
    (нульмерная/квазиодномерная). Тип данных строка 'НМ' или 'КМ'.
    
    limit_borders - ограничения накладываемы на расчет задачи:
    давление дульное и т.д. Тип данных - dict: 
    {'p_dul':_,'n_max':_,'v_dul':_,'etta_k':_,'psi_dul':_}.
    Максимальное дульное давление. Максимальное ускорение снаряда 
    во время расчета. Минимальная дульная скорость снаряда. 
    Максимальное значение конца горения пороха. Минимальная масса 
    сгоревшего свода пороха.
    
    out_arg - возвращаемый аргумент, критерий оценки оптимальности
    варианта решения задачи. Тип данных - строка: 'Zсл' или 'Wкн'.
    Так же возвращаются результаты проверки ограничений и 
    добавляются в словарь выходных параметров.
    """

        
    if model_setting == 'НМ':
        result_data = ozvb_termo(init_data)
        if out_arg == 'Zсл':
            l0 = init_data['init_conditions']['W_0']/(np.pi/4*init_data['init_conditions']['d']**2)
            ld = (result_data['x_p'][-1])
            kal = init_data['init_conditions']['d']
            omega = init_data['powders'][0]['omega']
            q = init_data['init_conditions']['q']
            output_arg = (((ld+l0)/l0)**0.5)/(((ld+l0)/kal)**4*(omega/q)**(3/2))*10**6
            output_arg = {'output_arg':output_arg}
        elif out_arg == 'Wкн':
            W0 = init_data['init_conditions']['W_0']
            output_arg = (result_data['x_p'][-1])*np.pi/4*init_data['init_conditions']['d']\
            **2+init_data['init_conditions']['W_0']
            output_arg = {'output_arg':output_arg}
        if limit_borders!=None:
            for i in limit_borders:
                if i == 'p_dul':
                    # Максимальное дульное давление
                    i = {'p_dul':result_data['p_m'][-1]}
                if i == 'n_max':
                    # Максимальное ускорение снаряда во время расчета
                    dv = (np.roll(result_data['v_p'],-1)-result_data['v_p'])[:-1]
                    dt = (np.roll(result_data['t'],-1)-result_data['t'])[:-1]
                    da = dv/dt
                    i = {'n_max':max(da)}
                if i == 'v_dul':
                    # Минимальная дульная скорость снаряда
                    i = {'v_dul':result_data['v_p'][-1]}
                if i =='etta_k':
                    # Максимальное значение конца горения пороха
                    etta_ind = np.argmax(result_data['z_1'])
                    etta_x = result_data['x_p'][etta_ind]
                    i = {'etta_k':etta_x/result_data['x_p'][-1]}
                if i == 'psi_dul':
                    # Минимальная масса сгоревшего свода пороха
                    i = {'psi_dul':result_data['psi_1'][-1]}
                output_arg.update(i)
        return output_arg
    elif model_setting == 'КМ':
        result2 = ozvb_lagrange(init_data)
        result_data = {}
        time_lagrange = []
        p_dno_langrange = []
        p_sn_langrange = []
        v_p_langrange = []
        x_p_langrange = []
        z_1_langrange = []
        psi_1_langrange = []
        for i in range(len(result2["layers"])):
            time_lagrange.append(result2['layers'][i]['t'])
            v_p_langrange.append(result2['layers'][i]['u'][-1])
            x_p_langrange.append(result2['layers'][i]['x'][-1])
            p_sn_langrange.append(result2['layers'][i]['p'][-1])
            p_dno_langrange.append(result2['layers'][i]['p'][0])
            var_z_1 = True if result2['layers'][i]['z_1'][0] == result2['layers'][i-1]['z_1'][0] else False
            z_1_langrange.append(var_z_1)
            var_psi_1 = True if result2['layers'][i]['psi_1'][0] == result2['layers'][i-1]['psi_1'][0] else False
            psi_1_langrange.append(var_psi_1)    
        result_data.update({'t':time_lagrange,'x_p':x_p_langrange,'v_p':v_p_langrange,
                          'p_dno':p_dno_langrange,'p_sn':p_sn_langrange,'z_1':z_1_langrange,'psi_1':psi_1_langrange})
        if out_arg == 'Zсл':
            l0 = init_data['init_conditions']['W_0']/(np.pi/4*init_data['init_conditions']['d']**2)
            ld = (result_data['x_p'][-1])
            kal = init_data['init_conditions']['d']
            omega = init_data['powders'][0]['omega']
            q = init_data['init_conditions']['q']
            output_arg = (((ld+l0)/l0)**0.5)/(((ld+l0)/kal)**4*(omega/q)**(3/2))*10**6
            output_arg = {'output_arg':output_arg}
        elif out_arg == 'Wкн':
            W0 = init_data['init_conditions']['W_0']
            output_arg = (result_data['x_p'][-1])*np.pi/4*init_data['init_conditions']['d']\
            **2+init_data['init_conditions']['W_0']
            output_arg = {'output_arg':output_arg}
        if limit_borders!=None:
            for i in limit_borders:
                if i == 'p_dul':
                    # Максимальное дульное давление
                    i = {'p_dul':result_data['p_sn'][-1]}
                if i == 'n_max':
                    # Максимальное ускорение снаряда во время расчета
                    dv = (np.roll(result_data['v_p'],-1)-result_data['v_p'])[:-1]
                    dt = (np.roll(result_data['t'],-1)-result_data['t'])[:-1]
                    da = dv/dt
                    i = {'n_max':max(da)}
                if i == 'v_dul':
                    # Минимальная дульная скорость снаряда
                    i = {'v_dul':result_data['v_p'][-1]}
                if i =='etta_k':
                    # Максимальное значение конца горения пороха
                    etta_ind = np.argmax(result_data['z_1'])
                    etta_x = result_data['x_p'][etta_ind]
                    i = {'etta_k':etta_x/result_data['x_p'][-1]}
                if i == 'psi_dul':
                    # Минимальная масса сгоревшего свода пороха
                    i = {'psi_dul':result_data['psi_1'][-1]} 
                output_arg.update(i)
        return output_arg

def Lim_dict(direction,base_mass):
    direction_out = {}
    if direction == None:
        return None
    for i in direction:
            direction_out.update({i:copy.deepcopy(base_mass)})  
    return direction_out

def inverse_OZVB(start_AS,init_values,Omega,ro):
    '''Функция обратной задачи внутренней баллистики, решаемая 
    посредством выполнения расчета прямой задачи внутренней 
    баллистики.
    
    start_AS - входные параметры расчета системы: характеристики
    орудия и снаряда (калибр, масса боеприпаса, обьем камеры 
    заряжания, тип орудия(гладкоствольное, нарезное), давление
    форсирования, температура в стволе в начале расчета и т.д.), 
    характеристики заряда пороха и воспламенителя(масса и 
    наименование марки и т. д.), допущения системы (учет 
    теплоотдачи в стенки ствола, учет давления столба воздуха 
    и т.д.), параметры остановки расчета (конец ствола, 
    превышение макс скорости, давления и т.д.), параметры для 
    расчета математической модели (нульмерной и квазиодномерной)).
    Тип данных - dict (пример в библиотеке pyballistics)
    
    init_values - тип расчетной модели (нульмерная/квазиодномерная). 
    Тип данных строка 'НМ' или 'КМ', возвращаемый аргумент, критерий 
    оценки оптимальности варианта решения задачи. Тип данных - 
    строка: 'Zсл' или 'Wкн', а также ограничения накладываемы на 
    расчет задачи: Максимальное дульное давление. Максимальное 
    ускорение снаряда во время расчета. Минимальная дульная скорость 
    снаряда. Максимальное значение конца горения пороха. Минимальная 
    масса сгоревшего свода пороха.
    {'model':_,'limitless_50':_,'limitless20':_,'limitless50':_,
    'output':_}
    limits: {'p_dul':_,'n_max':_,'v_dul':_,'etta_k':_,'psi_dul':_}
    
    Omega - массив с диапазоном масс снаряженного пороха.
    
    ro - массив с диапазоном плотности заряжания снаряженного 
    пороха.
    
    Выходным аргументом является словарь с массивами
    данных типа numpy.ndarray: 'Z' и 'limitless20' - результаты 
    расчета критерия и ограничейни при стандартных условиях Т_0 = 
    293.15 К, 'Z50' и 'limitless50' - результаты расчета критерия 
    и ограничений при Т_0 = 293.15+30 К, 'Z_50' и 'limitless_50' -
    результаты расчета критерия и ограничения при Т_0 = 
    293.15-70 К. 
    '''
    
    a = timeit.default_timer()
    start_var = copy.deepcopy(start_AS)
    start_var_50 = copy.deepcopy(start_AS)
    start_var_50['init_conditions']['T_0'] = start_var_50['init_conditions']['T_0']-70
    start_var50 = copy.deepcopy(start_AS)
    start_var50['init_conditions']['T_0'] = start_var50['init_conditions']['T_0']+30
    X,Y = np.meshgrid(ro,Omega)
    Z = np.zeros((len(ro),len(Omega)))
    Z_50 = None
    Z50 = None
    if init_values['limitless_50']!=None:
        Z_50 = copy.deepcopy(Z)
    if init_values['limitless50']!=None:
        Z50 = copy.deepcopy(Z)
    size_0 = np.zeros((len(ro),len(Omega)))
    limitless_dict20 = Lim_dict(init_values['limitless20'],copy.deepcopy(size_0)) 
    limitless_dict_50 = Lim_dict(init_values['limitless_50'],copy.deepcopy(size_0)) 
    limitless_dict50 = Lim_dict(init_values['limitless50'],copy.deepcopy(size_0)) 
    for i in range(len(ro)):
        for j in range(len(Omega)):
            start_var['init_conditions']['W_0'] = Omega[j]/ro[i]
            start_var['powders'][0]['omega'] = Omega[j]
            Res_OZVB = OZVB(init_data=start_var,out_arg=init_values['output'], \
                           model_setting=init_values['model'],limit_borders = init_values['limitless20'])
            Z[i][j] = Res_OZVB['output_arg']
            for k in limitless_dict20:
                limitless_dict20[k][i][j] = Res_OZVB[k] 
            if init_values['limitless_50']!=None:
                start_var_50['init_conditions']['W_0'] = Omega[j]/ro[i]
                start_var_50['powders'][0]['omega'] = Omega[j]
                Res_OZVB = OZVB(init_data=start_var_50,out_arg=init_values['output'], \
                           model_setting=init_values['model'],limit_borders = init_values['limitless_50'])
                Z_50[i][j] = Res_OZVB['output_arg']
                for k in limitless_dict_50:
                    limitless_dict_50[k][i][j] = Res_OZVB[k]
            if init_values['limitless50']!=None:
                start_var50['init_conditions']['W_0'] = Omega[j]/ro[i]
                start_var50['powders'][0]['omega'] = Omega[j]
                Res_OZVB = OZVB(init_data=start_var50,out_arg=init_values['output'], \
                           model_setting=init_values['model'],limit_borders = init_values['limitless50'])   
                Z50[i][j] = Res_OZVB['output_arg']
                for k in limitless_dict50:
                    limitless_dict50[k][i][j] = Res_OZVB[k]
    print("время работы=",timeit.default_timer()-a,"\n") 
    return {'Z':Z,'Z_50':Z_50,'Z50':Z50,'limitless20':limitless_dict20,'limitless50':limitless_dict50,\
            'limitless_50':limitless_dict_50,'ro':X,'Omega':Y}

def borders_func(limit_name,using_massive):
    output = []
    for i in limit_name:
        if i == 'p_dul':
            # Максимальное дульное давление'
            boo_mass = using_massive[i]<limit_name[i]
        if i == 'n_max':
            # Максимальное ускорение снаряда во время расчета
            boo_mass = using_massive[i]<limit_name[i] 
        if i == 'v_dul':
            # Минимальная дульная скорость снаряда
            boo_mass = using_massive[i]>limit_name[i]  
        if i =='etta_k':
            # Максимальное значение конца горения пороха
            boo_mass = using_massive[i]<limit_name[i]  
        if i == 'psi_dul':
            # Минимальная масса сгоревшего свода пороха
            boo_mass = using_massive[i]>limit_name[i] 
        output.append(boo_mass)
    return output
def Main_OZVB(initial_data,result_inverse):
    '''
    Функция поиска экстремума из выходных данных функции
    решения задачи внутренней баллистики артиллерийского
    орудия по средствам решения прямой задачи с разными
    начальными условиями заряжания (плотность заряжания,
    масса заряда). Также в расчет включаются все 
    ограничения наложенные на решение: максимальное 
    дульное давление, максимальное ускорение снаряда во 
    время расчета. Минимальная дульная скорость снаряда, 
    максимальное значение конца горения пороха, 
    минимальная масса сгоревшего свода пороха. Эти 
    ограничения накладываются слоями на результат 
    решения обратной задачи, после чего в расчетной 
    области решения производится поиск экстремума: 
    критерий Слухоцкого или обьем канала ствола (камора 
    и ведущая часть ствола).
    
    initial_data - тип расчетной модели (нульмерная/
    квазиодномерная). Тип данных строка 'НМ' или 'КМ', 
    возвращаемый аргумент, критерий оценки оптимальности 
    варианта решения задачи. Тип данных - строка: 'Zсл' 
    или 'Wкн', а также ограничения накладываемы на расчет 
    задачи: Максимальное дульное давление. Максимальное 
    ускорение снаряда во время расчета. Минимальная 
    дульная скорость снаряда. Максимальное значение конца 
    горения пороха. Минимальная масса сгоревшего свода 
    пороха. Тип переменной - словарь: 
    {'model':_,'limitless_50':_,'limitless20':_,
    'limitless50':_,'output':_}
    ограничения: {'p_dul':_,'n_max':_,'v_dul':_,
    'etta_k':_,'psi_dul':_}
    
    result_inverse - Выходные данные обратной задачи 
    словарь с массивами данных типа numpy.ndarray: 'Z' и 
    'limitless20' - результаты расчета критерия и 
    ограничейни при стандартных условиях Т_0 = 293.15 К, 
    'Z50' и 'limitless50' - результаты расчета критерия 
    и ограничений при Т_0 = 293.15+30 К, 'Z_50' и 
    'limitless_50' - результаты расчета критерия и 
    ограничения при Т_0 = 293.15-70 К.
    {'Z':_,'Z_50':_,'Z50':_,'limitless20':_,
    'limitless50':_,'limitless_50':_}
    '''
    
    lims = []
    lims.append(borders_func(initial_data['limitless20'],result_inverse['limitless20']))
    if initial_data['limitless50']!=None:
        lims.append(borders_func(initial_data['limitless50'],result_inverse['limitless50']))
    if initial_data['limitless_50']!=None:
        lims.append(borders_func(initial_data['limitless_50'],result_inverse['limitless_50']))
    Vis_data = result_inverse['Z']   
    for i in lims:
        for j in i:
            Vis_data = Vis_data*j
    return {'Result':Vis_data,'ro':result_inverse['ro'],'Omega':result_inverse['Omega']}

def Vis_OZVB(main_data):
    '''Функция выполняет структурирование данных из
    двумерного массива в одномерные с отбрасыванием
    точек с нулевыми значениями функции. На вход
    попадется выходной словарь из Main_OZVB, 
    который обрабатывается и в виде словаря 
    возвращает значения функции и ее координаты.'''
    
    Visual_Z = copy.deepcopy(main_data['Result'])
    Visual_ro = copy.deepcopy(np.transpose(main_data['ro']))
    Visual_Om = copy.deepcopy(np.transpose(main_data['Omega']))
    Z = []
    x_ro = []
    y_om = []
    for i in range(len(Visual_Z)):
        for j in range(len(Visual_Z[i])):
            if Visual_Z[i][j]!=0:
                Z.append(float('{:.4f}'.format(Visual_Z[i][j])))
                x_ro.append(Visual_ro[i][j])
                y_om.append(Visual_Om[i][j])
            else:
                continue    
            
    return {'Z':Z,'x_ro':x_ro,'y_om':y_om}
    
def gradient_func(Z,KRIT):
    '''Функция разбивает на подгруппы данные массива
    ориентируясь на максимальное значения и 
    разграничивая  (90%, 80%, 60%) данные. На выход
    подается массив с значениями уровня элемента 
    массива в зависимости от соответствие границам.
    0 - ниже 60%, 1 - больше 90%, 2 - больше 80%, но 
    ниже 90%, 3 - больше 60%, но ниже 80%.'''
    if KRIT == 'Zсл':
        main_obj = np.max(Z)
        first_lim = 0.9*main_obj
        sec_lim = 0.8*main_obj
        thr_lim = 0.6*main_obj
        pos_Z = np.zeros(len(Z))
        for i in range(len(Z)):
            if Z[i]>first_lim:
                pos_Z[i] = 1
                continue
            if Z[i]>sec_lim:
                pos_Z[i] = 2
                continue
            if Z[i]>thr_lim:
                pos_Z[i] = 3
                continue
        return pos_Z
    if KRIT == 'Wкн':
        main_obj = np.min(Z)
        first_lim = 1.1*main_obj
        sec_lim = 1.2*main_obj
        thr_lim = 1.3*main_obj
        pos_Z = np.zeros(len(Z))
        for i in range(len(Z)):
            if Z[i]<first_lim:
                pos_Z[i] = 1
                continue
            if Z[i]<sec_lim:
                pos_Z[i] = 2
                continue
            if Z[i]<thr_lim:
                pos_Z[i] = 3
                continue
        return pos_Z

def levels_sort(d_ball,point_sorter,KRIT):
    '''Функция разбиения значений по уровню для
    построения топографической диаграммы решения
    основной задачи внутренней баллисти с поиском
    оптимального решения обратной задачи.'''
    levels = {'x1':[],'x2':[],'x3':[],'x4':[],\
             'y1':[],'y2':[],'y3':[],'y4':[],'xm':0,'ym':0,'zm':0}
    if KRIT == 'Zсл':
        indm = np.argmax(d_ball['Z'])
        levels['zm'] = d_ball['Z'][indm]
        levels['xm'] =d_ball['x_ro'][indm]
        levels['ym'] =d_ball['y_om'][indm]
    if KRIT == 'Wкн':
        indm = np.argmin(d_ball['Z'])
        levels['zm'] = d_ball['Z'][indm]
        levels['xm'] =d_ball['x_ro'][indm]
        levels['ym'] =d_ball['y_om'][indm]
    for i in range(len(point_sorter)):
        if point_sorter[i]==0:
            #0-60%, 130+%
            levels['x1'].append(d_ball['x_ro'][i])
            levels['y1'].append(d_ball['y_om'][i])
            continue
        if point_sorter[i]==3:
            #60-80%, 110-120%
            levels['x2'].append(d_ball['x_ro'][i])
            levels['y2'].append(d_ball['y_om'][i])           
            continue    
        if point_sorter[i]==2:
            #80-90%, 120-130%
            levels['x3'].append(d_ball['x_ro'][i])
            levels['y3'].append(d_ball['y_om'][i])           
            continue 
        if point_sorter[i]==1:
            #90-100%, 100-110%
            levels['x4'].append(d_ball['x_ro'][i])
            levels['y4'].append(d_ball['y_om'][i]) 
            continue 
    return levels
def printing_results(fpr):
    '''Функция построения графика.'''
    hub = 30
    plt.figure(figsize=(11, 6))
    plt.scatter(fpr['x1'], fpr['y1'], s=hub, color='green', marker='o',label='Отклонение больше 40% от оптимума')
    plt.scatter(fpr['x2'], fpr['y2'], s=hub, color='yellow', marker='o',label='Отклонение 30% от оптимума')
    plt.scatter(fpr['x3'], fpr['y3'], s=hub, color='orange', marker='o',label='Отклонение 20% от оптимума')
    plt.scatter(fpr['x4'], fpr['y4'], s=hub, color='red', marker='o',label='Отклонение 10% от оптимума')
    plt.scatter(fpr['xm'], fpr['ym'], s=hub*10,color='black', marker = '*',label='Оптимальный вариант')
    plt.ylabel('$ρ, кг/м^3$')
    plt.xlabel('ω, кг')
    plt.legend()
    plt.grid() 
    plt.show()
opts_my = {'powders': [{'omega': 18, 'dbname': 'НДТ-3 23/1'}],
 'init_conditions': {'q': 100,
  'd': 0.2032,
  'W_0': 0.03,
  'phi_1': 1.05,
  'p_0': 30000000.0,
  'T_0' : 293.15,
  'n_S' : 1.04},
 'igniter': {'p_ign_0': 1000000.0},      
           
 'meta_termo': {'dt': 5e-06, 'method': 'rk2'},
 'meta_lagrange': {'CFL': 0.9, 'n_cells': 150},
 'stop_conditions': {'v_p': 650, 'p_max': 350000000.0, 'x_p': 6.096},
 'windage': {'shock_wave' : False},
 'heat': {'enabled' : False}}

init_vals = {'model':'КМ','limitless_50':None,'limitless20':{'n_max':100000,'v_dul':645},\
             'limitless50':{'p_dul':150*10**6},'output':'Zсл'}



# Реальные данные для работы программы
#Omega_q = np.arange(0.17,0.24,0.002)
#Omega = Omega_q*opts_my['init_conditions']['q']
#ro = np.arange(550,650,1)

# Тестовые данные для работы программы
Omega = np.linspace(17,23,10)
ro = np.linspace(500,850,10)

Result_data = inverse_OZVB(start_AS=opts_my,init_values=init_vals,Omega=Omega,ro=ro) 
asssa = Main_OZVB(init_vals,Result_data)
Gr_Res = Vis_OZVB(asssa)
apachi = gradient_func(Gr_Res['Z'],KRIT = init_vals['output'])
alllevels = levels_sort(d_ball=Gr_Res,point_sorter=apachi,KRIT = init_vals['output'])
print('Оптимальный вариант: ',init_vals['output'],': ',alllevels['zm'],', ρ: ',alllevels['xm'],', ω: ',alllevels['ym'])
printing_results(alllevels)  
