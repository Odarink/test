import math
import numpy as np
import timeit

testo = [5.359219129693241 , 1.675949367088608 , 678.4810126582279]
       #длина ствола   относительная масса заряда   плотность заряжания

# Параметры огневой системы
Fire_sys = {    'd': 115*10**(-3),     # Калибр системы
                'l': testo[0],            # Скорость вылета снаряда
                'p0': 10*10**6,        # Давления форсирования
                'm': 5.5,              # Масса снаряда
                'ns': 1,               # Поправка на нарезы    
                'ρ0': testo[2],    # Плотность заряжания
                'OmegaW': testo[1],} # Относительная масса заряда

# Параметры пороха 
Powder7 = {'f': 1.019*10**6,        # Сила пороха
           'k': 1.222,              # Постоянная адиабаты
           'α_k': 1.005*10**(-3),   # Коволюм
           'δ': 1600,               # Плотность пороха
           'I_k': 0.91*10**6,       # Импульс пороха
           'k1': 1,                 # Геометрический параметр зерна
           'λ_1': 0,                # Геометрический параметр зерна
           'k2': 0,                 # Геометрический параметр зерна
           'λ_2': 0,                # Геометрический параметр зерна
           'z_k': 1,                # Геометрический параметр зерна
           'k_f': 0.00025,          # коэффициент поправки при tн
           'k_I': 0.0016,           # коэффициент поправки при tн
           'Name':'15/1 тр ВА'}     # Название пороха

Powder1 = {'f': 0.968*10**6,        # Сила пороха
           'k': 1.25,               # Постоянная адиабаты
           'α_k': 1.113*10**(-3),   # Коволюм
           'δ': 1520,               # Плотность пороха
           'I_k': 1.075*10**6,      # Импульс пороха
           'k1': 1,                 # Геометрический параметр зерна
           'λ_1': 0,                # Геометрический параметр зерна
           'k2': 0,                 # Геометрический параметр зерна
           'λ_2': 0,                # Геометрический параметр зерна
           'z_k': 1,                # Геометрический параметр зерна
           'k_f': 0.00040,          # коэффициент поправки при tн
           'k_I': 0.0022,           # коэффициент поправки при tн
           'Name':'ДГ-3 13_1'}      # Название пороха

Powder4 = {'f': 1.015*10**6,        # Сила пороха
           'k': 1.224,              # Постоянная адиабаты
           'α_k': 1.009*10**(-3),   # Коволюм
           'δ': 1600,               # Плотность пороха
           'I_k': 1.04*10**6,       # Импульс пороха
           'k1': 1,                 # Геометрический параметр зерна
           'λ_1': 0,                # Геометрический параметр зерна
           'k2': 0,                 # Геометрический параметр зерна
           'λ_2': 0,                # Геометрический параметр зерна
           'z_k': 1,                # Геометрический параметр зерна
           'k_f': 0.00025,          # коэффициент поправки при tн
           'k_I': 0.0016,           # коэффициент поправки при tн
           'Name':'16_1 В_А'}       # Название пороха

# Данные метода
Metod = { 'Kr':0.4,  # Число Курента
          'W':1.2,   # Фильтр Шумана
          'N':300,}  # Число ячеек


def FullMetal_Alchemist(Fire_system,Powder,Method,T):
    # Характеристики системы 
    d =      Fire_system ['d']       # калибр
    p0 =     Fire_system ['p0']      # давление форсирования
    m =      Fire_system ['m']       # масса снаряда
    ns =     Fire_system ['ns']      # Нарезы
    omegaW = Fire_system ['OmegaW']  # Относительная масса заряда
    ρ0 =     Fire_system ['ρ0']      # Плотность заряжания
    ω =      m*omegaW                # масса заряда
    l =      Fire_system ['l']       # длина ствола
    S=ns*math.pi*d*d/4               # площадь сечения трубы
    x0=(ω)/(S*ρ0)                    # длина каморы
    M = ρ0*S*x0                      # масса газа за поршнем
    t_окр = T                        # Температура окружающей среды
    # Характеристики пороха
    k =      Powder ['k']      # адиабата
    f =      Powder ['f']      # сила пороха
    δ =      Powder ['δ']      # плотность пороха
    k1 =     Powder ['k1']     # коэфициент формы порохового зерна
    λ_1 =    Powder ['λ_1']    # коэфициент формы порохового зерна
    k2 =     Powder ['k2']     # коэфициент формы порохового зерна
    λ_2 =    Powder ['λ_2']    # коэфициент формы порохового зерна
    α_k =    Powder ['α_k']    # коволюм
    I_k =    Powder ['I_k']    # импульс пороха
    z_k =    Powder ['z_k']    # коэфициент формы порохового зерна
    k_f =    Powder ['k_f']    # коэффициент поправки при tн
    k_I =    Powder ['k_I']    # коэффициент поправки при tн

    # Влияние температуры на параметры пороха
    f = f*(1 + k_f*(t_окр - 15)) 
    I_k = I_k*(1 - k_I*(t_окр - 15))
    print('f', f)
    print('I_k',I_k)
    # Параметры разностной схемы
    Kr =  Method['Kr']   # число куранта
    W =   Method['W']    # фильтр
    N =   Method['N']    # Количество узлов на каждом временном слое

    # Расчет начальных условий для пороха во момент форсирования      
    ψ0=((1/ρ0)-(1/(δ)))/((f/(p0))-((1-α_k*(δ))/(δ)))
    σ0=(1+(4*ψ0*λ_1/k1))**0.5
    z0=2*ψ0/(k1*(1+σ0))

    p,ρ,e,z,ψ = (np.zeros(N) for _ in range(5)) 
    p += p0; ρ += ρ0; z += z0; ψ += ψ0
    e += ((p/(k-1))*((1/ρ)-((1-ψ)/δ) - α_k*ψ)+(1-ψ)*f/(k-1))

    v = np.zeros(N+1)  #
    x,dx = np.linspace(0,x0,N+1,retstep=True)
    q,h = np.linspace(0,M,N,retstep=True)
    c0 = ((k*p0)/((1/ρ0)-((1-ψ0)/δ)-(α_k*ψ0)))**0.5/ρ0

    τ = [0,Kr*dx/c0,]
    fly_time = [0,Kr*dx/c0,]
    # время действия
    vp = [0]
    # массив скоростей поршня в решенных временных слоях
    p1 = [p0]
    # массив давлений на дно канала в решенных временных слоях
    p2 = [p0]
    j=0
    p_sred = [p0]
    lx = [x[N]]
    τ1 = 1
    a = timeit.default_timer()
    flag = False
    lk=0
    while x[N]<l:
        v [1:-1] = (v[1:-1]-τ[j+1]*S*((np.roll(p,-1)-p)[:-1])/h)
        v[N] = (v[N] + τ[j+1]*S*p[N-1] / (0.5*h+m))
        x += τ[j+1]*v       
        # расчет пространственных координат τ[j+1] на временном слое
        # расчет параметров внутри ячеек   ↓    ↓ 
        z+= τ[j+1]*p/I_k
        # массив относительной толщины сгоревшего свода τ[j+1] на временном слое

        mask2 = z > 1
        ψ = k1*z*(1+λ_1*z)
        mask3 = z > z_k
        z[mask3] = z_k
        ψ[mask2] = k1*z[mask2]*(1+λ_1*z[mask2])+k2*(z[mask2]-1)*(1+λ_2)


        # Проверка догорания пороха
        if np.sum(mask3)>=(np.sum(((np.array(mask3))-1)*(-1))+int(N/2.5)) and flag == False:
            flag = True
            lk = x[N]
            print(lk)
        # массив функции газоприхода τ[j+1] на временном слое
        ρ = h/(S*(np.roll(x, -1) - x))[:-1]     
        # массив плотностей внутри ячеек на τ[j+1] временном слое
        e -= (τ[j+1]*S*p*(np.roll(v,-1)-v)[:-1])/h 
        # массив энергий внутри ячеек на τ[j+1] временном слое
        p = (((k-1)*e)-(1-ψ)*f)/((1/ρ)-((1-ψ)/δ)-(α_k*ψ))
        # массив давлений внутри ячеек на τ[j+1] временном слое
        c = ((k*p)/((1/ρ)-((1-ψ)/δ)-(α_k*ψ)))**0.5/ρ
        # массив скоростей звука внутри ячеек на τ[j+1] временном слое
        τ_min = min(Kr*((np.roll(x,-1)-x)[:-1])/(abs(((np.roll(v,-1)+v)/2)[:-1])+c))     
        # расчет минимального шага по времени
        if τ_min < τ1:
            # Проверка шага по фильтру Шумана
            τ11 = τ_min
        if W*τ[j+1]<τ11:
            τ1 = W*τ[j+1]
        else:
            τ1 = τ_min
        τ.append(τ1)
        fly_time.append((fly_time[len(fly_time)-1]+τ1))
        vp.append(v[N])
        p_sred.append(1/x[N]*np.sum(p*(np.roll(x, -1) - x)[:-1] ))
        # расчет среднего баллистического давления на τ[j+1] временном слое
        p1.append(p[0])
        # запись давлени на дно трубы на τ[j+1] временном слое
        p2.append(p[N-1])
        lx.append(x[N])
        # Запись давление на дно поршня на τ[j+1] временном слое
        j+=1    
    print("время работы=",timeit.default_timer()-a,"\n") 
#    print(vp[-1:])
#    print(mask3)
    t1=np.linspace(0,fly_time[-1],(len(fly_time)-1))
    if lk==0:
        lk =x[N]

    return vp,p_sred,lx,t1,lk,p1,p2




temp = [-50,15,50]
vp1,p_sred1,lx1,t11,lk1,p11,p21 = FullMetal_Alchemist(Fire_system = Fire_sys,Powder=Powder4,Method=Metod,T = temp[0])

vp2,p_sred2,lx2,t12,lk2,p12,p22 = FullMetal_Alchemist(Fire_system = Fire_sys,Powder=Powder4,Method=Metod,T = temp[1])
vp3,p_sred3,lx3,t13,lk3,p13,p23 = FullMetal_Alchemist(Fire_system = Fire_sys,Powder=Powder4,Method=Metod,T = temp[2])


import matplotlib.pyplot as plt
plt.figure(figsize=(6,4))
plt.ylabel('L, м')
plt.xlabel('t, с')
plt.plot(t11,lx1,color='green',linewidth = 2)
plt.plot(t12,lx2,color='blue',linewidth = 2)
plt.plot(t13,lx3,color='red',linewidth = 2)
line_labels = ['-40°С', '15°С', '+40°С']
plt.legend([lx1, lx2, lx3],              # List of the line objects
           labels= line_labels,       # The labels for each line
           loc="upper left",        # Position of the legend
           borderaxespad=0.1,         # Add little spacing around the legend box
           title="Начальные температуры")      # Title for the legend
plt.plot(t11[lx1.index(lk1)],lk1,'o')
plt.plot(t12[lx2.index(lk2)],lk2,'o')
plt.plot(t13[lx3.index(lk3)],lk3,'o')
plt.grid()
plt.show()
